{
  "language": "Solidity",
  "sources": {
    "contracts/DAO.sol": {
      "content": "// SPDX-License-Identifier:MIT\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"./ICryptoDevs.sol\";\nimport \"./IFackNFTMarketplace.sol\";\n\npragma solidity ^0.8.0;\n\ncontract DAO is Ownable {\n    struct Proposal {\n        // nft tokenId\n        uint256 nftTokenId;\n        // the UNIX timestamp until with this proposal is active\n        uint256 deadline;\n        // vote yes for this proposal\n        uint256 yayVotes;\n        // vote no for this proposal\n        uint256 nayVotes;\n        // whether or not this proposal has been executed yet.\n        // Cannot be executed before the deadLine has been exceeded\n        bool executed;\n        // a mapping of NFT tokenIds to booleans indicating whether that\n        // NFT has already been used to cast a vote\n        mapping(uint256 => bool) voters;\n    }\n    enum Vote {\n        YAY,\n        NAY\n    }\n\n    // a mapping of ID to Proposal\n    mapping(uint256 => Proposal) public proposals;\n    uint256 public numPropsals;\n    ICryptoDevs cryptoDevs;\n    IFackNFTMarketplace nftMarketplace;\n\n    constructor(address _nftMarketplace, address _cryptoDevsNFT) payable {\n        cryptoDevs = ICryptoDevs(_cryptoDevsNFT);\n        nftMarketplace = IFackNFTMarketplace(_nftMarketplace);\n    }\n\n    modifier nftHolderOnly() {\n        require(cryptoDevs.balanceOf(msg.sender) > 0, \"NOT a DAO member\");\n        _;\n    }\n\n    modifier activeProposalOnly(uint256 proposalIndex) {\n        require(\n            proposals[proposalIndex].deadline > block.timestamp,\n            \"DEADLINE_EXCEDDED\"\n        );\n        _;\n    }\n    modifier inactiveProposalOnly(uint256 proposalIndex) {\n        require(\n            proposals[proposalIndex].deadline <= block.timestamp,\n            \"DEADLINE_NOT_EXCEEDED\"\n        );\n        require(\n            proposals[proposalIndex].executed == false,\n            \"PROPOSAL_ALREADY_EXECUTED\"\n        );\n        _;\n    }\n\n    function createProposal(uint _nftTokenId)\n        external\n        nftHolderOnly\n        returns (uint256)\n    {\n        require(nftMarketplace.available(_nftTokenId), \"NFT not for sale\");\n        Proposal storage proposal = proposals[numPropsals];\n        proposal.nftTokenId = _nftTokenId;\n        proposal.deadline = block.timestamp + 5 minutes;\n        numPropsals++;\n        return numPropsals - 1;\n    }\n\n    function voteOnProposal(uint256 proposalIndex, Vote vote)\n        external\n        nftHolderOnly\n        activeProposalOnly(proposalIndex)\n    {\n        Proposal storage proposal = proposals[proposalIndex];\n        uint256 voterNFTBalance = cryptoDevs.balanceOf(msg.sender);\n        uint256 numVotes = 0;\n        for (uint256 i = 0; i < voterNFTBalance; i++) {\n            uint256 tokenId = cryptoDevs.tokenOfOwnerByIndex(msg.sender, i);\n            numVotes++;\n            proposal.voters[tokenId] = true;\n        }\n        require(numVotes > 0, \"Already voted\");\n        if (vote == Vote.YAY) {\n            proposal.yayVotes += numVotes;\n        } else {\n            proposal.nayVotes += numVotes;\n        }\n    }\n\n    function executeProposal(uint256 proposalIndex)\n        external\n        nftHolderOnly\n        inactiveProposalOnly(proposalIndex)\n    {\n        Proposal storage proposal = proposals[proposalIndex];\n        if (proposal.yayVotes > proposal.nayVotes) {\n            uint256 nftPrice = nftMarketplace.getPrice();\n            require(address(this).balance >= nftPrice, \"Not enough funds\");\n            nftMarketplace.purchase{value: nftPrice}(proposal.nftTokenId);\n        }\n        proposal.executed = true;\n    }\n\n    /// @dev withdrawEther allows the contract owner (deployer) to withdraw the ETH from the contract\n    function withdrawEther() external onlyOwner {\n        payable(owner()).transfer(address(this).balance);\n    }\n\n    // The following two functions allow the contract to accept ETH deposits\n    // directly from a wallet without calling a function\n    receive() external payable {}\n\n    fallback() external payable {}\n}\n"
    },
    "contracts/ICryptoDevs.sol": {
      "content": "//SPDX-License-Identifier:MIT\n\npragma solidity ^0.8.0;\n\ninterface ICryptoDevs {\n    function tokenOfOwnerByIndex(address owner, uint256 index)\n        external\n        view\n        returns (uint256 tokenId);\n\n    function balanceOf(address owner) external view returns (uint256 balance);\n}\n"
    },
    "contracts/IFackNFTMarketplace.sol": {
      "content": "// SPDX-License-Identifier:MIT\n\npragma solidity ^0.8.0;\n\ninterface IFackNFTMarketplace {\n    function getPrice() external view returns (uint256);\n\n    function available(uint256 _tokenId) external view returns (bool);\n\n    function purchase(uint256 _tokenId) external payable;\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "contracts/FackNFTMarketplace.sol": {
      "content": "// SPDX-License-Identifier:MIT\n\npragma solidity ^0.8.0;\n\ncontract FackNFTMarketplace {\n    mapping(uint256 => address) public tokens;\n    uint256 nftPrice = 0.01 ether;\n\n    function purchase(uint256 _tokenId) external payable {\n        require(msg.value == nftPrice, \"This NFT costs 0.1 ether\");\n        tokens[_tokenId] = msg.sender;\n    }\n\n    function getPrice() external view returns (uint256) {\n        return nftPrice;\n    }\n\n    function available(uint256 _tokenId) external view returns (bool) {\n        if (tokens[_tokenId] == address(0)) {\n            return true;\n        }\n        return false;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}